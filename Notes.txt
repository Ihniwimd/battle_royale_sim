On the use of deepcopy:
Deepcopy is always kind of a shady thing to use, but in our case it's a workable solution for copying the state at the beginning of a turn for resets. It is important that Python's deepcopy has mitigation for recursive/duplicate references (though we have none of the former). For maximum efficiency, it would be ideal to define for each class a __deepcopy__, which would enable us to skip deepcopying stuff that doesn't need it (name, event baseProps, etc.) but this can be deferred until later/maybe even only if it seems like the deepcopy time is really a problem.

Contestant-specific events, weapon-specific events and other mixed information:
These kinds of things are fun, but introduce a problem by degrading the separation between classes. 
I considered some possibilities:
1) storing such mixed information in its own special object whose pointer/reference gets passed to every class at initialization.
2) storing such information in the class its most relevant to, and accepting the loss of pure separation.

While 1) might seem most aesthetically pleasing, it creates an object which is directly dependent on the exact list of contestants, etc. to make sense .
In the end, it's probably best to place this information wherever it minimizes json editing confusion (and in only one place):

At the moment:
Information about which stats affect any given event's probability is stored with the event (since the list of events will change frequently, but the list of stats will not, and the number of stats is expected to be much lower than the number of events).
    - at initialization, contestant objects parse the list of events and generate a list of associated numerical stat-based effects for the contestant, since this will stay relatively fixed, and can be used for look-up.
Information about which events are unique to specific contestants is stored with the event.
    - Because unique events are roughly 1 to 1, it doesn't matter much where the information is placed. Events is done primarily because that's where most other things are
    - At initialization, this information is duplicated by contestant objects in the form of an "Event Disabled" field (which also incorporates other information)
Information about which events *require* items is placed with the event, since this information will be needed without referencing the item itself (or else it would be necessary to parse the list of all objects)
    - At initialization, this information is duplicated by contestant objects in the form of an "Event Disabled" field (which also incorporates other information)
Information about how items manipulation event probabilities or *disable* events is stored with the Item, for application when items are acquired by contestants, since this information is irrelevant before then.
    - Event disabling is incorporated into the Event Disabled field of the Contestant
    
    
Why so many dicts?:
Well dicts are faster at lookup than lists and have much faster removal/insertion. They waste memory, relatively speaking, but that's not a huge concern here. We could really do better if we assigned objects arbitrary indices and always passed those around, but that is a tremendous pain and makes the maintenance hard.

List comprehensions:

A lot of stuff here would be faster with list comprehensions, but for clarity doing normal for loops for now.

Indenting:

Python is a bitch about indenting. Right now I'm using 4-space indenting, so we may as well stick with that... (If you use more than one type, python's interpreter will error)


General argument philosophy:

For anything where there may be an uncertain argument (i.e., stats being passed into a Contestan constructor where we dont know yet what exact stats we want), we should remember to pass this uncertainty in the form of a dict, so that we can always change what it contains without needing to change function arguments, etc. Python is designed to make this easy, so we may as well use it.

Random python tidbit:
If you define a function signature as:
def myfunc(**kwargs):

In python, this makes it so that kwargs is a dictionary with keys corresponding to the name of the argument and values corresponding to the value. So if you called myfunc(fish=78, fire="meguca"), then inside myfunc you could do:

def myfunc(**kwargs):
    print kwargs[fish] #Gives 78
    print kwargs[fire] #Gives meguca

This will give us unlimited power to change the input arguments without changing the function signature. I couldn't think of a use for this, but I suspect it may be useful at some point...